Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Create the form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Internal Vulnerability Scanner"
$form.Size = New-Object System.Drawing.Size(600, 400)
$form.StartPosition = "CenterScreen"
$form.BackColor = [System.Drawing.Color]::FromArgb(45, 45, 48)

# Create a label for the title
$titleLabel = New-Object System.Windows.Forms.Label
$titleLabel.Text = "Internal Vulnerability Scanner"
$titleLabel.ForeColor = [System.Drawing.Color]::White
$titleLabel.Font = New-Object System.Drawing.Font("Segoe UI", 16, [System.Drawing.FontStyle]::Bold)
$titleLabel.AutoSize = $true
$titleLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
$form.Controls.Add($titleLabel)

# Create a text box to display the process log
$textBoxLog = New-Object System.Windows.Forms.TextBox
$textBoxLog.Location = New-Object System.Drawing.Point(20, 200)
$textBoxLog.Size = New-Object System.Drawing.Size(560, 150)
$textBoxLog.Multiline = $true
$textBoxLog.ScrollBars = "Vertical"
$textBoxLog.BackColor = [System.Drawing.Color]::FromArgb(30, 30, 30)
$textBoxLog.ForeColor = [System.Drawing.Color]::White
$textBoxLog.Font = New-Object System.Drawing.Font("Segoe UI", 10)
$form.Controls.Add($textBoxLog)

# Create the Scan Internal Network button
$btnScanNetwork = New-Object System.Windows.Forms.Button
$btnScanNetwork.Location = New-Object System.Drawing.Point(50, 80)
$btnScanNetwork.Size = New-Object System.Drawing.Size(240, 40)
$btnScanNetwork.Text = "Scan Internal Network"
$btnScanNetwork.BackColor = [System.Drawing.Color]::FromArgb(28, 151, 234)
$btnScanNetwork.ForeColor = [System.Drawing.Color]::White
$btnScanNetwork.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
$form.Controls.Add($btnScanNetwork)

# Create the Open Scan Results button
$btnOpenResults = New-Object System.Windows.Forms.Button
$btnOpenResults.Location = New-Object System.Drawing.Point(310, 80)
$btnOpenResults.Size = New-Object System.Drawing.Size(240, 40)
$btnOpenResults.Text = "Open Scan Results"
$btnOpenResults.BackColor = [System.Drawing.Color]::FromArgb(28, 151, 234)
$btnOpenResults.ForeColor = [System.Drawing.Color]::White
$btnOpenResults.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
$form.Controls.Add($btnOpenResults)

# Ensure the output directory exists
# Change output directory path, if necessary
$outputDirectory = "C:\Vulnerability Scans\Output"
if (-not (Test-Path -Path $outputDirectory)) {
    $textBoxLog.AppendText("Creating output directory...`r`n")
    New-Item -ItemType Directory -Path $outputDirectory -Force
    $textBoxLog.AppendText("Output directory created at $outputDirectory`r`n")
} else {
    $textBoxLog.AppendText("Output directory already exists at $outputDirectory`r`n")
}

# Function to run nmap scan
function Run-NmapScan {
    param (
        [string]$ipRange,
        [string]$outputFile
    )

    $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("Starting nmap scan on IP range: $ipRange`r`n")})

    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = "nmap"
    $startInfo.Arguments = "-sV --script=vuln $ipRange -oN `"$outputFile`""
    $startInfo.RedirectStandardOutput = $true
    $startInfo.RedirectStandardError = $true
    $startInfo.UseShellExecute = $false
    $startInfo.CreateNoWindow = $true

    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $startInfo
    $process.Start() | Out-Null

    $outputLines = New-Object System.Collections.ArrayList

    while (-not $process.HasExited) {
        $line = $process.StandardOutput.ReadLine()
        if ($line -ne $null) {
            $outputLines.Add($line) | Out-Null
        }
    }

    while ($line = $process.StandardError.ReadLine()) {
        if ($line -ne $null) {
            $outputLines.Add("Error: $line") | Out-Null
        }
    }

    $process.WaitForExit()

    # Process the output to make it more informative
    $currentHost = ""
    $vulnerabilities = @()
    foreach ($line in $outputLines) {
        if ($line -match "Nmap scan report for (.+)") {
            if ($currentHost -ne "") {
                $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("${currentHost}: " + ($vulnerabilities.Count) + " vulnerabilities found.`r`n")})
                foreach ($vuln in $vulnerabilities) {
                    $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("  - ${vuln}`r`n")})
                }
                $vulnerabilities = @()
            }
            $currentHost = $matches[1]
        } elseif ($line -match "\| (.+): (.+)") {
            $vulnerabilities += $matches[2]
        }
    }

    if ($currentHost -ne "") {
        $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("${currentHost}: " + ($vulnerabilities.Count) + " vulnerabilities found.`r`n")})
        foreach ($vuln in $vulnerabilities) {
            $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("  - ${vuln}`r`n")})
        }
    }

    $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("Nmap scan completed.`r`n")})

    # Write the output to the file
    $outputLines | Set-Content -Path $outputFile
}

# Event handler for Scan Internal Network button
$btnScanNetwork.Add_Click({
    $textBoxLog.Clear()
	# Change ip range that is being scanned, if necessary
    $ipRange = "10.10.1.0/24"
	# Change output file name, if necessary
    $outputFile = "$outputDirectory\nmap_scan_results.txt"

    Start-Job -ScriptBlock {
        param ($ipRange, $outputFile)
        . {
            function Invoke-RunNmapScan {
                param (
                    [string]$ipRange,
                    [string]$outputFile
                )

                $startInfo = New-Object System.Diagnostics.ProcessStartInfo
                $startInfo.FileName = "nmap"
                $startInfo.Arguments = "-sV --script=vuln $ipRange -oN `"$outputFile`""
                $startInfo.RedirectStandardOutput = $true
                $startInfo.RedirectStandardError = $true
                $startInfo.UseShellExecute = $false
                $startInfo.CreateNoWindow = $true

                $process = New-Object System.Diagnostics.Process
                $process.StartInfo = $startInfo
                $process.Start() | Out-Null

                $outputLines = New-Object System.Collections.ArrayList

                while (-not $process.HasExited) {
                    $line = $process.StandardOutput.ReadLine()
                    if ($line -ne $null) {
                        $outputLines.Add($line) | Out-Null
                        $line | Out-String
                    }
                }

                while ($line = $process.StandardError.ReadLine()) {
                    if ($line -ne $null) {
                        $outputLines.Add("Error: $line") | Out-Null
                        $line | Out-String
                    }
                }

                $process.WaitForExit()
                "Nmap scan completed." | Out-String

                # Write the output to the file
                $outputLines | Set-Content -Path $outputFile
            }

            Invoke-RunNmapScan -ipRange $ipRange -outputFile $outputFile
        }
    } -ArgumentList $ipRange, $outputFile | Out-Null

    # Timer to update the UI with the job output
    $timer = New-Object System.Windows.Forms.Timer
    $timer.Interval = 2000 # Check every 2 seconds
    $timer.Add_Tick({
        $job = Get-Job | Where-Object { $_.State -eq 'Running' }
        if ($job -ne $null) {
            $output = Receive-Job -Job $job -Keep
            foreach ($line in $output) {
                $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("${line}`r`n")})
            }
        }
        else {
            $timer.Stop()
            $job = Get-Job | Where-Object { $_.State -eq 'Completed' }
            if ($job -ne $null) {
                $output = Receive-Job -Job $job
                foreach ($line in $output) {
                    $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("${line}`r`n")})
                }
                Remove-Job -Job $job
                $textBoxLog.Invoke([Action]{$textBoxLog.AppendText("Scan complete. Results saved in ${outputFile}`r`n")})
            }
        }
    })
    $timer.Start()
})

# Event handler for Open Scan Results button
$btnOpenResults.Add_Click({
    if (Test-Path -Path "$outputDirectory\nmap_scan_results.txt") {
        $textBoxLog.Text = Get-Content -Path "$outputDirectory\nmap_scan_results.txt" -Raw
    } else {
        [System.Windows.Forms.MessageBox]::Show("File not found: nmap_scan_results.txt", "Error", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)
    }
})

# Show the form and adjust title label position
$form.Add_Shown({
    $titleLabel.Location = New-Object System.Drawing.Point([math]::Round(($form.ClientSize.Width - $titleLabel.Width) / 2), 20)
})

# Show the form
$form.ShowDialog()
